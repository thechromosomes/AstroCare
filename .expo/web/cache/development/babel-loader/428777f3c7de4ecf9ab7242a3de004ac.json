{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/home/sagar/Desktop/astro_care/App.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { AppLoading } from \"expo\";\nimport { Asset } from \"expo-asset\";\nimport { Block, GalioProvider } from \"galio-framework\";\nimport { Images, products, materialTheme } from \"./constants/\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport Screens from \"./navigation/Screens\";\nimport { enableScreens } from \"react-native-screens\";\nenableScreens();\nvar assetImages = [Images.Pro, Images.Profile, Images.Avatar, Images.Onboarding];\nproducts.map(function (product) {\n  return assetImages.push(product.image);\n});\n\nfunction cacheImages(images) {\n  return images.map(function (image) {\n    if (typeof image === \"string\") {\n      return Image.prefetch(image);\n    } else {\n      return Asset.fromModule(image).downloadAsync();\n    }\n  });\n}\n\nvar App = function (_React$Component) {\n  _inherits(App, _React$Component);\n\n  var _super = _createSuper(App);\n\n  function App() {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      isLoadingComplete: false\n    };\n\n    _this._loadResourcesAsync = function _callee() {\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", Promise.all(_toConsumableArray(cacheImages(assetImages))));\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this._handleLoadingError = function (error) {\n      console.warn(error);\n    };\n\n    _this._handleFinishLoading = function () {\n      _this.setState({\n        isLoadingComplete: true\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      if (!this.state.isLoadingComplete && !this.props.skipLoadingScreen) {\n        return React.createElement(AppLoading, {\n          startAsync: this._loadResourcesAsync,\n          onError: this._handleLoadingError,\n          onFinish: this._handleFinishLoading,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 9\n          }\n        });\n      } else {\n        return React.createElement(NavigationContainer, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 9\n          }\n        }, React.createElement(GalioProvider, {\n          theme: materialTheme,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 11\n          }\n        }, React.createElement(Block, {\n          flex: true,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 13\n          }\n        }, Platform.OS === \"ios\" && React.createElement(StatusBar, {\n          barStyle: \"default\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 41\n          }\n        }), React.createElement(Screens, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 15\n          }\n        }))));\n      }\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nexport { App as default };","map":{"version":3,"sources":["/home/sagar/Desktop/astro_care/App.js"],"names":["React","AppLoading","Asset","Block","GalioProvider","Images","products","materialTheme","NavigationContainer","Screens","enableScreens","assetImages","Pro","Profile","Avatar","Onboarding","map","product","push","image","cacheImages","images","Image","prefetch","fromModule","downloadAsync","App","state","isLoadingComplete","_loadResourcesAsync","Promise","all","_handleLoadingError","error","console","warn","_handleFinishLoading","setState","props","skipLoadingScreen","Platform","OS","Component"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;AAEA,SAASC,UAAT,QAA2B,MAA3B;AACA,SAASC,KAAT,QAAsB,YAAtB;AACA,SAASC,KAAT,EAAgBC,aAAhB,QAAqC,iBAArC;AAEA,SAASC,MAAT,EAAiBC,QAAjB,EAA2BC,aAA3B;AAEA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,OAAP;AAGA,SAASC,aAAT,QAA8B,sBAA9B;AACAA,aAAa;AAGb,IAAMC,WAAW,GAAG,CAClBN,MAAM,CAACO,GADW,EAElBP,MAAM,CAACQ,OAFW,EAGlBR,MAAM,CAACS,MAHW,EAIlBT,MAAM,CAACU,UAJW,CAApB;AAQAT,QAAQ,CAACU,GAAT,CAAa,UAAAC,OAAO;AAAA,SAAIN,WAAW,CAACO,IAAZ,CAAiBD,OAAO,CAACE,KAAzB,CAAJ;AAAA,CAApB;;AAEA,SAASC,WAAT,CAAqBC,MAArB,EAA6B;AAC3B,SAAOA,MAAM,CAACL,GAAP,CAAW,UAAAG,KAAK,EAAI;AACzB,QAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7B,aAAOG,KAAK,CAACC,QAAN,CAAeJ,KAAf,CAAP;AACD,KAFD,MAEO;AACL,aAAOjB,KAAK,CAACsB,UAAN,CAAiBL,KAAjB,EAAwBM,aAAxB,EAAP;AACD;AACF,GANM,CAAP;AAOD;;IAEoBC,G;;;;;;;;;;;;;;;UAEnBC,K,GAAQ;AACNC,MAAAA,iBAAiB,EAAE;AADb,K;;UA2BRC,mB,GAAsB;AAAA;AAAA;AAAA;AAAA;AAAA,+CACbC,OAAO,CAACC,GAAR,oBAAgBX,WAAW,CAACT,WAAD,CAA3B,EADa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;UAItBqB,mB,GAAsB,UAAAC,KAAK,EAAI;AAG7BC,MAAAA,OAAO,CAACC,IAAR,CAAaF,KAAb;AACD,K;;UAEDG,oB,GAAuB,YAAM;AAC3B,YAAKC,QAAL,CAAc;AAAET,QAAAA,iBAAiB,EAAE;AAArB,OAAd;AACD,K;;;;;;;WAnCD,kBAAS;AACP,UAAI,CAAC,KAAKD,KAAL,CAAWC,iBAAZ,IAAiC,CAAC,KAAKU,KAAL,CAAWC,iBAAjD,EAAoE;AAClE,eACE,oBAAC,UAAD;AACE,UAAA,UAAU,EAAE,KAAKV,mBADnB;AAEE,UAAA,OAAO,EAAE,KAAKG,mBAFhB;AAGE,UAAA,QAAQ,EAAE,KAAKI,oBAHjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,OARD,MAQO;AACL,eACE,oBAAC,mBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,oBAAC,aAAD;AAAe,UAAA,KAAK,EAAE7B,aAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,oBAAC,KAAD;AAAO,UAAA,IAAI,MAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACGiC,QAAQ,CAACC,EAAT,KAAgB,KAAhB,IAAyB,oBAAC,SAAD;AAAW,UAAA,QAAQ,EAAC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAD5B,EAEE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAFF,CADF,CADF,CADF;AAUD;AACF;;;;EA3B8BzC,KAAK,CAAC0C,S;;SAAlBhB,G","sourcesContent":["import React from \"react\";\nimport { Platform, StatusBar, Image } from \"react-native\";\nimport { AppLoading } from \"expo\";\nimport { Asset } from \"expo-asset\";\nimport { Block, GalioProvider } from \"galio-framework\";\n\nimport { Images, products, materialTheme } from \"./constants/\";\n\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport Screens from \"./navigation/Screens\";\n\n// Before rendering any navigation stack\nimport { enableScreens } from \"react-native-screens\";\nenableScreens();\n\n// cache app images\nconst assetImages = [\n  Images.Pro,\n  Images.Profile,\n  Images.Avatar,\n  Images.Onboarding\n];\n\n// cache product images\nproducts.map(product => assetImages.push(product.image));\n\nfunction cacheImages(images) {\n  return images.map(image => {\n    if (typeof image === \"string\") {\n      return Image.prefetch(image);\n    } else {\n      return Asset.fromModule(image).downloadAsync();\n    }\n  });\n}\n\nexport default class App extends React.Component {\n\n  state = {\n    isLoadingComplete: false\n  };\n\n  render() {\n    if (!this.state.isLoadingComplete && !this.props.skipLoadingScreen) {\n      return (\n        <AppLoading\n          startAsync={this._loadResourcesAsync}\n          onError={this._handleLoadingError}\n          onFinish={this._handleFinishLoading}\n        />\n      );\n    } else {\n      return (\n        <NavigationContainer>\n          <GalioProvider theme={materialTheme}>\n            <Block flex >\n              {Platform.OS === \"ios\" && <StatusBar barStyle=\"default\" />}\n              <Screens />\n            </Block>\n          </GalioProvider>\n        </NavigationContainer>\n      );\n    }\n  }\n\n  _loadResourcesAsync = async () => {\n    return Promise.all([...cacheImages(assetImages)]);\n  };\n\n  _handleLoadingError = error => {\n    // In this case, you might want to report the error to your error\n    // reporting service, for example Sentry\n    console.warn(error);\n  };\n\n  _handleFinishLoading = () => {\n    this.setState({ isLoadingComplete: true });\n  };\n}\n"]},"metadata":{},"sourceType":"module"}