{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport PropTypes from 'prop-types';\nimport * as array from 'd3-array';\nimport * as scale from 'd3-scale';\nimport * as shape from 'd3-shape';\nimport React, { PureComponent } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport { Svg } from 'react-native-svg';\nimport Path from \"./animated-path\";\n\nvar AreaStack = function (_PureComponent) {\n  _inherits(AreaStack, _PureComponent);\n\n  var _super = _createSuper(AreaStack);\n\n  function AreaStack() {\n    var _this;\n\n    _classCallCheck(this, AreaStack);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      height: 0,\n      width: 0\n    });\n\n    return _this;\n  }\n\n  _createClass(AreaStack, [{\n    key: \"_onLayout\",\n    value: function _onLayout(event) {\n      var _event$nativeEvent$la = event.nativeEvent.layout,\n          height = _event$nativeEvent$la.height,\n          width = _event$nativeEvent$la.width;\n      this.setState({\n        height: height,\n        width: width\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          data = _this$props.data,\n          keys = _this$props.keys,\n          colors = _this$props.colors,\n          animate = _this$props.animate,\n          animationDuration = _this$props.animationDuration,\n          style = _this$props.style,\n          curve = _this$props.curve,\n          numberOfTicks = _this$props.numberOfTicks,\n          _this$props$contentIn = _this$props.contentInset,\n          _this$props$contentIn2 = _this$props$contentIn.top,\n          top = _this$props$contentIn2 === void 0 ? 0 : _this$props$contentIn2,\n          _this$props$contentIn3 = _this$props$contentIn.bottom,\n          bottom = _this$props$contentIn3 === void 0 ? 0 : _this$props$contentIn3,\n          _this$props$contentIn4 = _this$props$contentIn.left,\n          left = _this$props$contentIn4 === void 0 ? 0 : _this$props$contentIn4,\n          _this$props$contentIn5 = _this$props$contentIn.right,\n          right = _this$props$contentIn5 === void 0 ? 0 : _this$props$contentIn5,\n          gridMin = _this$props.gridMin,\n          gridMax = _this$props.gridMax,\n          children = _this$props.children,\n          offset = _this$props.offset,\n          order = _this$props.order,\n          svgs = _this$props.svgs,\n          xAccessor = _this$props.xAccessor,\n          xScale = _this$props.xScale,\n          clampY = _this$props.clampY,\n          clampX = _this$props.clampX;\n      var _this$state = this.state,\n          height = _this$state.height,\n          width = _this$state.width;\n\n      if (data.length === 0) {\n        return React.createElement(View, {\n          style: style\n        });\n      }\n\n      var series = shape.stack().keys(keys).order(order).offset(offset)(data);\n      var yValues = array.merge(array.merge(series));\n      var xValues = data.map(function (item, index) {\n        return xAccessor({\n          item: item,\n          index: index\n        });\n      });\n      var yExtent = array.extent([].concat(_toConsumableArray(yValues), [gridMin, gridMax]));\n      var xExtent = array.extent(xValues);\n      var _this$props2 = this.props,\n          _this$props2$yMin = _this$props2.yMin,\n          yMin = _this$props2$yMin === void 0 ? yExtent[0] : _this$props2$yMin,\n          _this$props2$yMax = _this$props2.yMax,\n          yMax = _this$props2$yMax === void 0 ? yExtent[1] : _this$props2$yMax,\n          _this$props2$xMin = _this$props2.xMin,\n          xMin = _this$props2$xMin === void 0 ? xExtent[0] : _this$props2$xMin,\n          _this$props2$xMax = _this$props2.xMax,\n          xMax = _this$props2$xMax === void 0 ? xExtent[1] : _this$props2$xMax;\n      var y = scale.scaleLinear().domain([yMin, yMax]).range([height - bottom, top]).clamp(clampY);\n      var x = xScale().domain([xMin, xMax]).range([left, width - right]).clamp(clampX);\n      var ticks = y.ticks(numberOfTicks);\n      var areas = series.map(function (serie, index) {\n        var path = shape.area().x(function (d, index) {\n          return x(xAccessor({\n            item: d.data,\n            index: index\n          }));\n        }).y0(function (d) {\n          return y(d[0]);\n        }).y1(function (d) {\n          return y(d[1]);\n        }).curve(curve)(data.map(function (_, index) {\n          return serie[index];\n        }));\n        return {\n          path: path,\n          key: keys[index],\n          color: colors[index]\n        };\n      });\n      var extraProps = {\n        x: x,\n        y: y,\n        width: width,\n        height: height,\n        ticks: ticks,\n        areas: areas\n      };\n      return React.createElement(View, {\n        style: style\n      }, React.createElement(View, {\n        style: {\n          flex: 1\n        },\n        onLayout: function onLayout(event) {\n          return _this2._onLayout(event);\n        }\n      }, height > 0 && width > 0 && React.createElement(Svg, {\n        style: {\n          height: height,\n          width: width\n        }\n      }, React.Children.map(children, function (child) {\n        if (child && child.props.belowChart) {\n          return React.cloneElement(child, extraProps);\n        }\n\n        return null;\n      }), areas.map(function (area, index) {\n        return React.createElement(Path, _extends({\n          key: area.key,\n          fill: area.color\n        }, svgs[index], {\n          animate: animate,\n          animationDuration: animationDuration,\n          d: area.path\n        }));\n      }), React.Children.map(children, function (child) {\n        if (child && !child.props.belowChart) {\n          return React.cloneElement(child, extraProps);\n        }\n\n        return null;\n      }))));\n    }\n  }], [{\n    key: \"extractDataPoints\",\n    value: function extractDataPoints(data, keys) {\n      var order = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : shape.stackOrderNone;\n      var offset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : shape.stackOffsetNone;\n      var series = shape.stack().keys(keys).order(order).offset(offset)(data);\n      return array.merge(array.merge(series));\n    }\n  }]);\n\n  return AreaStack;\n}(PureComponent);\n\nAreaStack.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.object).isRequired,\n  keys: PropTypes.arrayOf(PropTypes.string).isRequired,\n  colors: PropTypes.arrayOf(PropTypes.string).isRequired,\n  svgs: PropTypes.arrayOf(PropTypes.object),\n  offset: PropTypes.func,\n  order: PropTypes.func,\n  style: PropTypes.any,\n  animate: PropTypes.bool,\n  animationDuration: PropTypes.number,\n  contentInset: PropTypes.shape({\n    top: PropTypes.number,\n    left: PropTypes.number,\n    right: PropTypes.number,\n    bottom: PropTypes.number\n  }),\n  numberOfTicks: PropTypes.number,\n  showGrid: PropTypes.bool,\n  xScale: PropTypes.func,\n  xAccessor: PropTypes.func,\n  yMin: PropTypes.any,\n  yMax: PropTypes.any,\n  xMin: PropTypes.any,\n  xMax: PropTypes.any,\n  clampX: PropTypes.bool,\n  clampY: PropTypes.bool\n};\nAreaStack.defaultProps = {\n  curve: shape.curveLinear,\n  offset: shape.stackOffsetNone,\n  order: shape.stackOrderNone,\n  svgs: [],\n  strokeWidth: 2,\n  contentInset: {},\n  numberOfTicks: 10,\n  showGrid: true,\n  xScale: scale.scaleLinear,\n  xAccessor: function xAccessor(_ref) {\n    var index = _ref.index;\n    return index;\n  }\n};\nexport default AreaStack;","map":{"version":3,"sources":["stacked-area-chart.js"],"names":["order","shape","offset","series","array","height","width","_onLayout","nativeEvent","layout","render","contentInset","top","bottom","left","right","clampX","data","style","yValues","xValues","xAccessor","item","index","yExtent","xExtent","yMin","yMax","xMin","xMax","y","scale","x","xScale","ticks","areas","path","d","serie","key","keys","color","colors","extraProps","flex","event","child","React","area","svgs","AreaStack","PropTypes","animate","animationDuration","number","numberOfTicks","showGrid","clampY","bool","curve","strokeWidth"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types'\nimport * as array from 'd3-array'\nimport * as scale from 'd3-scale'\nimport * as shape from 'd3-shape'\nimport React, { PureComponent } from 'react'\nimport { View } from 'react-native'\nimport { Svg } from 'react-native-svg'\nimport Path from './animated-path'\n\nclass AreaStack extends PureComponent {\n    static extractDataPoints(data, keys, order = shape.stackOrderNone, offset = shape.stackOffsetNone) {\n        const series = shape\n            .stack()\n            .keys(keys)\n            .order(order)\n            .offset(offset)(data)\n\n        //double merge arrays to extract just the values\n        return array.merge(array.merge(series))\n    }\n\n    state = {\n        height: 0,\n        width: 0,\n    }\n\n    _onLayout(event) {\n        const {\n            nativeEvent: {\n                layout: { height, width },\n            },\n        } = event\n        this.setState({ height, width })\n    }\n\n    render() {\n        const {\n            data,\n            keys,\n            colors,\n            animate,\n            animationDuration,\n            style,\n            curve,\n            numberOfTicks,\n            contentInset: { top = 0, bottom = 0, left = 0, right = 0 },\n            gridMin,\n            gridMax,\n            children,\n            offset,\n            order,\n            svgs,\n            xAccessor,\n            xScale,\n            clampY,\n            clampX,\n        } = this.props\n\n        const { height, width } = this.state\n\n        if (data.length === 0) {\n            return <View style={style} />\n        }\n\n        const series = shape\n            .stack()\n            .keys(keys)\n            .order(order)\n            .offset(offset)(data)\n\n        //double merge arrays to extract just the yValues\n        const yValues = array.merge(array.merge(series))\n        const xValues = data.map((item, index) => xAccessor({ item, index }))\n\n        const yExtent = array.extent([...yValues, gridMin, gridMax])\n        const xExtent = array.extent(xValues)\n\n        const { yMin = yExtent[0], yMax = yExtent[1], xMin = xExtent[0], xMax = xExtent[1] } = this.props\n\n        //invert range to support svg coordinate system\n        const y = scale\n            .scaleLinear()\n            .domain([yMin, yMax])\n            .range([height - bottom, top])\n            .clamp(clampY)\n\n        const x = xScale()\n            .domain([xMin, xMax])\n            .range([left, width - right])\n            .clamp(clampX)\n\n        const ticks = y.ticks(numberOfTicks)\n\n        const areas = series.map((serie, index) => {\n            const path = shape\n                .area()\n                .x((d, index) => x(xAccessor({ item: d.data, index })))\n                .y0((d) => y(d[0]))\n                .y1((d) => y(d[1]))\n                .curve(curve)(data.map((_, index) => serie[index]))\n\n            return {\n                path,\n                key: keys[index],\n                color: colors[index],\n            }\n        })\n\n        const extraProps = {\n            x,\n            y,\n            width,\n            height,\n            ticks,\n            areas,\n        }\n\n        return (\n            <View style={style}>\n                <View style={{ flex: 1 }} onLayout={(event) => this._onLayout(event)}>\n                    {height > 0 && width > 0 && (\n                        <Svg style={{ height, width }}>\n                            {React.Children.map(children, (child) => {\n                                if (child && child.props.belowChart) {\n                                    return React.cloneElement(child, extraProps)\n                                }\n                                return null\n                            })}\n                            {areas.map((area, index) => (\n                                <Path\n                                    key={area.key}\n                                    fill={area.color}\n                                    {...svgs[index]}\n                                    animate={animate}\n                                    animationDuration={animationDuration}\n                                    d={area.path}\n                                />\n                            ))}\n                            {React.Children.map(children, (child) => {\n                                if (child && !child.props.belowChart) {\n                                    return React.cloneElement(child, extraProps)\n                                }\n                                return null\n                            })}\n                        </Svg>\n                    )}\n                </View>\n            </View>\n        )\n    }\n}\n\nAreaStack.propTypes = {\n    data: PropTypes.arrayOf(PropTypes.object).isRequired,\n    keys: PropTypes.arrayOf(PropTypes.string).isRequired,\n    colors: PropTypes.arrayOf(PropTypes.string).isRequired,\n    svgs: PropTypes.arrayOf(PropTypes.object),\n    offset: PropTypes.func,\n    order: PropTypes.func,\n    style: PropTypes.any,\n    animate: PropTypes.bool,\n    animationDuration: PropTypes.number,\n    contentInset: PropTypes.shape({\n        top: PropTypes.number,\n        left: PropTypes.number,\n        right: PropTypes.number,\n        bottom: PropTypes.number,\n    }),\n    numberOfTicks: PropTypes.number,\n    showGrid: PropTypes.bool,\n    xScale: PropTypes.func,\n    xAccessor: PropTypes.func,\n\n    yMin: PropTypes.any,\n    yMax: PropTypes.any,\n    xMin: PropTypes.any,\n    xMax: PropTypes.any,\n    clampX: PropTypes.bool,\n    clampY: PropTypes.bool,\n}\n\nAreaStack.defaultProps = {\n    curve: shape.curveLinear,\n    offset: shape.stackOffsetNone,\n    order: shape.stackOrderNone,\n    svgs: [],\n    strokeWidth: 2,\n    contentInset: {},\n    numberOfTicks: 10,\n    showGrid: true,\n    xScale: scale.scaleLinear,\n    xAccessor: ({ index }) => index,\n}\n\nexport default AreaStack\n"]},"metadata":{},"sourceType":"module"}