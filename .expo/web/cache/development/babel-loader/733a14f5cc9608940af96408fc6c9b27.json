{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nvar STEP_STATUS = {\n  CURRENT: 'current',\n  FINISHED: 'finished',\n  UNFINISHED: 'unfinished'\n};\nvar defaultStyles = {\n  stepIndicatorSize: 30,\n  currentStepIndicatorSize: 40,\n  separatorStrokeWidth: 3,\n  separatorStrokeUnfinishedWidth: 0,\n  separatorStrokeFinishedWidth: 0,\n  currentStepStrokeWidth: 5,\n  stepStrokeWidth: 0,\n  stepStrokeCurrentColor: '#4aae4f',\n  stepStrokeFinishedColor: '#4aae4f',\n  stepStrokeUnFinishedColor: '#4aae4f',\n  separatorFinishedColor: '#4aae4f',\n  separatorUnFinishedColor: '#a4d4a5',\n  stepIndicatorFinishedColor: '#4aae4f',\n  stepIndicatorUnFinishedColor: '#a4d4a5',\n  stepIndicatorCurrentColor: '#ffffff',\n  stepIndicatorLabelFontSize: 15,\n  currentStepIndicatorLabelFontSize: 15,\n  stepIndicatorLabelCurrentColor: '#000000',\n  stepIndicatorLabelFinishedColor: '#ffffff',\n  stepIndicatorLabelUnFinishedColor: 'rgba(255,255,255,0.5)',\n  labelColor: '#000000',\n  labelSize: 13,\n  labelAlign: 'center',\n  currentStepLabelColor: '#4aae4f'\n};\n\nvar StepIndicator = function StepIndicator(_ref) {\n  var _ref$currentPosition = _ref.currentPosition,\n      currentPosition = _ref$currentPosition === void 0 ? 0 : _ref$currentPosition,\n      _ref$stepCount = _ref.stepCount,\n      stepCount = _ref$stepCount === void 0 ? 5 : _ref$stepCount,\n      _ref$direction = _ref.direction,\n      direction = _ref$direction === void 0 ? 'horizontal' : _ref$direction,\n      _ref$customStyles = _ref.customStyles,\n      customStylesFromProps = _ref$customStyles === void 0 ? defaultStyles : _ref$customStyles,\n      _ref$labels = _ref.labels,\n      labels = _ref$labels === void 0 ? [] : _ref$labels,\n      onPress = _ref.onPress,\n      renderCustomStepIndicator = _ref.renderStepIndicator,\n      renderLabel = _ref.renderLabel;\n\n  var _React$useState = React.useState(0),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      width = _React$useState2[0],\n      setWidth = _React$useState2[1];\n\n  var _React$useState3 = React.useState(0),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      height = _React$useState4[0],\n      setHeight = _React$useState4[1];\n\n  var _React$useState5 = React.useState(0),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      progressBarSize = _React$useState6[0],\n      setProgressBarSize = _React$useState6[1];\n\n  var _React$useState7 = React.useState(_objectSpread(_objectSpread({}, defaultStyles), customStylesFromProps)),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      customStyles = _React$useState8[0],\n      setCustomStyles = _React$useState8[1];\n\n  var progressAnim = React.useRef(new Animated.Value(0)).current;\n  var sizeAnim = React.useRef(new Animated.Value(customStyles.stepIndicatorSize)).current;\n  var staleSizeAnim = React.useRef(new Animated.Value(customStyles.stepIndicatorSize)).current;\n  var borderRadiusAnim = React.useRef(new Animated.Value(customStyles.stepIndicatorSize / 2)).current;\n\n  var stepPressed = function stepPressed(position) {\n    if (onPress) {\n      onPress(position);\n    }\n  };\n\n  var effectCustomStyles = function effectCustomStyles() {\n    setCustomStyles(_objectSpread(_objectSpread({}, customStyles), customStylesFromProps));\n  };\n\n  React.useEffect(effectCustomStyles, [customStylesFromProps]);\n\n  var effectCurrentPosition = function effectCurrentPosition() {\n    onCurrentPositionChanged(currentPosition);\n  };\n\n  React.useEffect(effectCurrentPosition, [currentPosition, progressBarSize]);\n\n  var renderProgressBarBackground = function renderProgressBarBackground() {\n    var progressBarBackgroundStyle = {\n      backgroundColor: customStyles.separatorUnFinishedColor,\n      position: 'absolute'\n    };\n\n    if (direction === 'vertical') {\n      progressBarBackgroundStyle = _objectSpread(_objectSpread({}, progressBarBackgroundStyle), {}, {\n        left: (width - customStyles.separatorStrokeWidth) / 2,\n        top: height / (2 * stepCount),\n        bottom: height / (2 * stepCount),\n        width: customStyles.separatorStrokeUnfinishedWidth === 0 ? customStyles.separatorStrokeWidth : customStyles.separatorStrokeUnfinishedWidth\n      });\n    } else {\n      progressBarBackgroundStyle = _objectSpread(_objectSpread({}, progressBarBackgroundStyle), {}, {\n        top: (height - customStyles.separatorStrokeWidth) / 2,\n        left: width / (2 * stepCount),\n        right: width / (2 * stepCount),\n        height: customStyles.separatorStrokeUnfinishedWidth === 0 ? customStyles.separatorStrokeWidth : customStyles.separatorStrokeUnfinishedWidth\n      });\n    }\n\n    return React.createElement(View, {\n      onLayout: function onLayout(event) {\n        if (direction === 'vertical') {\n          setProgressBarSize(event.nativeEvent.layout.height);\n        } else {\n          setProgressBarSize(event.nativeEvent.layout.width);\n        }\n      },\n      style: progressBarBackgroundStyle\n    });\n  };\n\n  var renderProgressBar = function renderProgressBar() {\n    var progressBarStyle = {\n      backgroundColor: customStyles.separatorFinishedColor,\n      position: 'absolute'\n    };\n\n    if (direction === 'vertical') {\n      progressBarStyle = _objectSpread(_objectSpread({}, progressBarStyle), {}, {\n        left: (width - customStyles.separatorStrokeWidth) / 2,\n        top: height / (2 * stepCount),\n        bottom: height / (2 * stepCount),\n        width: customStyles.separatorStrokeFinishedWidth === 0 ? customStyles.separatorStrokeWidth : customStyles.separatorStrokeFinishedWidth,\n        height: progressAnim\n      });\n    } else {\n      progressBarStyle = _objectSpread(_objectSpread({}, progressBarStyle), {}, {\n        top: (height - customStyles.separatorStrokeWidth) / 2,\n        left: width / (2 * stepCount),\n        right: width / (2 * stepCount),\n        height: customStyles.separatorStrokeFinishedWidth === 0 ? customStyles.separatorStrokeWidth : customStyles.separatorStrokeFinishedWidth,\n        width: progressAnim\n      });\n    }\n\n    return React.createElement(Animated.View, {\n      style: progressBarStyle\n    });\n  };\n\n  var renderStepIndicator = function renderStepIndicator() {\n    var steps = [];\n\n    var _loop = function _loop(position) {\n      steps.push(React.createElement(TouchableWithoutFeedback, {\n        key: position,\n        onPress: function onPress() {\n          return stepPressed(position);\n        }\n      }, React.createElement(View, {\n        style: [styles.stepContainer, direction === 'vertical' ? {\n          flexDirection: 'column'\n        } : {\n          flexDirection: 'row'\n        }]\n      }, renderStep(position))));\n    };\n\n    for (var position = 0; position < stepCount; position++) {\n      _loop(position);\n    }\n\n    return React.createElement(View, {\n      onLayout: function onLayout(event) {\n        setWidth(event.nativeEvent.layout.width);\n        setHeight(event.nativeEvent.layout.height);\n      },\n      style: [styles.stepIndicatorContainer, direction === 'vertical' ? {\n        flexDirection: 'column',\n        width: customStyles.currentStepIndicatorSize\n      } : {\n        flexDirection: 'row',\n        height: customStyles.currentStepIndicatorSize\n      }]\n    }, steps);\n  };\n\n  var renderStepLabels = function renderStepLabels() {\n    if (!labels || labels.length === 0) {\n      return;\n    }\n\n    var labelViews = labels.map(function (label, index) {\n      var selectedStepLabelStyle = index === currentPosition ? {\n        color: customStyles.currentStepLabelColor\n      } : {\n        color: customStyles.labelColor\n      };\n      return React.createElement(TouchableWithoutFeedback, {\n        style: styles.stepLabelItem,\n        key: index,\n        onPress: function onPress() {\n          return stepPressed(index);\n        }\n      }, React.createElement(View, {\n        style: styles.stepLabelItem\n      }, renderLabel ? renderLabel({\n        position: index,\n        stepStatus: getStepStatus(index),\n        label: label,\n        currentPosition: currentPosition\n      }) : React.createElement(Text, {\n        style: [styles.stepLabel, selectedStepLabelStyle, {\n          fontSize: customStyles.labelSize,\n          fontFamily: customStyles.labelFontFamily\n        }]\n      }, label)));\n    });\n    return React.createElement(View, {\n      style: [styles.stepLabelsContainer, direction === 'vertical' ? {\n        flexDirection: 'column',\n        paddingHorizontal: 4\n      } : {\n        flexDirection: 'row',\n        paddingVertical: 4\n      }, {\n        alignItems: customStyles.labelAlign\n      }]\n    }, labelViews);\n  };\n\n  var renderStep = function renderStep(position) {\n    var stepStyle;\n    var indicatorLabelStyle = {};\n\n    switch (getStepStatus(position)) {\n      case STEP_STATUS.CURRENT:\n        {\n          stepStyle = {\n            backgroundColor: customStyles.stepIndicatorCurrentColor,\n            borderWidth: customStyles.currentStepStrokeWidth,\n            borderColor: customStyles.stepStrokeCurrentColor,\n            height: sizeAnim,\n            width: sizeAnim,\n            borderRadius: borderRadiusAnim,\n            overflow: 'hidden'\n          };\n          indicatorLabelStyle = {\n            overflow: 'hidden',\n            fontSize: customStyles.currentStepIndicatorLabelFontSize,\n            color: customStyles.stepIndicatorLabelCurrentColor\n          };\n          break;\n        }\n\n      case STEP_STATUS.FINISHED:\n        {\n          stepStyle = {\n            backgroundColor: customStyles.stepIndicatorFinishedColor,\n            borderWidth: customStyles.stepStrokeWidth,\n            borderColor: customStyles.stepStrokeFinishedColor,\n            height: staleSizeAnim,\n            width: staleSizeAnim,\n            borderRadius: customStyles.stepIndicatorSize / 2,\n            overflow: 'hidden'\n          };\n          indicatorLabelStyle = {\n            overflow: 'hidden',\n            fontSize: customStyles.stepIndicatorLabelFontSize,\n            color: customStyles.stepIndicatorLabelFinishedColor\n          };\n          break;\n        }\n\n      case STEP_STATUS.UNFINISHED:\n        {\n          stepStyle = {\n            backgroundColor: customStyles.stepIndicatorUnFinishedColor,\n            borderWidth: customStyles.stepStrokeWidth,\n            borderColor: customStyles.stepStrokeUnFinishedColor,\n            height: staleSizeAnim,\n            width: staleSizeAnim,\n            borderRadius: customStyles.stepIndicatorSize / 2,\n            overflow: 'hidden'\n          };\n          indicatorLabelStyle = {\n            overflow: 'hidden',\n            fontSize: customStyles.stepIndicatorLabelFontSize,\n            color: customStyles.stepIndicatorLabelUnFinishedColor\n          };\n          break;\n        }\n\n      default:\n    }\n\n    return React.createElement(Animated.View, {\n      key: 'step-indicator',\n      style: [styles.step, stepStyle]\n    }, renderCustomStepIndicator ? renderCustomStepIndicator({\n      position: position,\n      stepStatus: getStepStatus(position)\n    }) : React.createElement(Text, {\n      style: indicatorLabelStyle\n    }, \"\".concat(position + 1)));\n  };\n\n  var getStepStatus = function getStepStatus(stepPosition) {\n    if (stepPosition === currentPosition) {\n      return STEP_STATUS.CURRENT;\n    } else if (stepPosition < currentPosition) {\n      return STEP_STATUS.FINISHED;\n    } else {\n      return STEP_STATUS.UNFINISHED;\n    }\n  };\n\n  var onCurrentPositionChanged = function onCurrentPositionChanged(position) {\n    if (position > stepCount - 1) {\n      position = stepCount - 1;\n    }\n\n    var animateToPosition = progressBarSize / (stepCount - 1) * position;\n    sizeAnim.setValue(customStyles.stepIndicatorSize);\n    staleSizeAnim.setValue(customStyles.stepIndicatorSize);\n    borderRadiusAnim.setValue(customStyles.stepIndicatorSize / 2);\n    Animated.sequence([Animated.timing(progressAnim, {\n      toValue: isNaN(animateToPosition) ? 0 : animateToPosition,\n      duration: 200,\n      useNativeDriver: false\n    }), Animated.parallel([Animated.timing(sizeAnim, {\n      toValue: customStyles.currentStepIndicatorSize,\n      duration: 100,\n      useNativeDriver: false\n    }), Animated.timing(borderRadiusAnim, {\n      toValue: customStyles.currentStepIndicatorSize / 2,\n      duration: 100,\n      useNativeDriver: false\n    })])]).start();\n  };\n\n  return React.createElement(View, {\n    style: [styles.container, direction === 'vertical' ? {\n      flexDirection: 'row',\n      flex: 1\n    } : {\n      flexDirection: 'column'\n    }]\n  }, width !== 0 && React.createElement(React.Fragment, null, renderProgressBarBackground(), renderProgressBar()), renderStepIndicator(), labels && renderStepLabels());\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'rgba(1,0,0,0)'\n  },\n  stepIndicatorContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-around',\n    backgroundColor: 'rgba(1,0,0,0)'\n  },\n  stepLabelsContainer: {\n    justifyContent: 'space-around'\n  },\n  step: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    zIndex: 2\n  },\n  stepContainer: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  stepLabel: {\n    fontSize: 12,\n    textAlign: 'center',\n    fontWeight: '500'\n  },\n  stepLabelItem: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});\nexport default React.memo(StepIndicator);","map":{"version":3,"sources":["index.tsx"],"names":["STEP_STATUS","CURRENT","FINISHED","UNFINISHED","defaultStyles","stepIndicatorSize","currentStepIndicatorSize","separatorStrokeWidth","separatorStrokeUnfinishedWidth","separatorStrokeFinishedWidth","currentStepStrokeWidth","stepStrokeWidth","stepStrokeCurrentColor","stepStrokeFinishedColor","stepStrokeUnFinishedColor","separatorFinishedColor","separatorUnFinishedColor","stepIndicatorFinishedColor","stepIndicatorUnFinishedColor","stepIndicatorCurrentColor","stepIndicatorLabelFontSize","currentStepIndicatorLabelFontSize","stepIndicatorLabelCurrentColor","stepIndicatorLabelFinishedColor","stepIndicatorLabelUnFinishedColor","labelColor","labelSize","labelAlign","currentStepLabelColor","StepIndicator","currentPosition","stepCount","direction","customStyles","customStylesFromProps","labels","renderStepIndicator","renderLabel","React","progressAnim","Animated","sizeAnim","staleSizeAnim","borderRadiusAnim","stepPressed","position","onPress","effectCustomStyles","setCustomStyles","effectCurrentPosition","onCurrentPositionChanged","renderProgressBarBackground","progressBarBackgroundStyle","backgroundColor","left","width","top","height","bottom","right","event","setProgressBarSize","renderProgressBar","progressBarStyle","steps","styles","flexDirection","renderStep","setWidth","setHeight","renderStepLabels","labelViews","selectedStepLabelStyle","color","stepLabelItem","stepStatus","getStepStatus","label","fontSize","fontFamily","labelFontFamily","paddingHorizontal","paddingVertical","alignItems","indicatorLabelStyle","stepStyle","borderWidth","borderColor","borderRadius","overflow","renderCustomStepIndicator","stepPosition","animateToPosition","progressBarSize","toValue","isNaN","duration","useNativeDriver","flex","container","stepIndicatorContainer","justifyContent","stepLabelsContainer","step","zIndex","stepContainer","stepLabel","textAlign","fontWeight"],"mappings":"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","sourcesContent":["/* eslint-disable react-native/no-inline-styles */\nimport React from 'react';\nimport {\n  View,\n  Text,\n  StyleSheet,\n  Animated,\n  TouchableWithoutFeedback,\n  ViewStyle,\n  TextStyle,\n} from 'react-native';\nimport { StepIndicatorProps } from './types';\n\nconst STEP_STATUS = {\n  CURRENT: 'current',\n  FINISHED: 'finished',\n  UNFINISHED: 'unfinished',\n};\n\ninterface DefaultStepIndicatorStyles {\n  stepIndicatorSize: number;\n  currentStepIndicatorSize: number;\n  separatorStrokeWidth: number;\n  separatorStrokeUnfinishedWidth: number;\n  separatorStrokeFinishedWidth: number;\n  currentStepStrokeWidth: number;\n  stepStrokeWidth: number;\n  stepStrokeCurrentColor: string;\n  stepStrokeFinishedColor: string;\n  stepStrokeUnFinishedColor: string;\n  separatorFinishedColor: string;\n  separatorUnFinishedColor: string;\n  stepIndicatorFinishedColor: string;\n  stepIndicatorUnFinishedColor: string;\n  stepIndicatorCurrentColor: string;\n  stepIndicatorLabelFontSize: number;\n  currentStepIndicatorLabelFontSize: number;\n  stepIndicatorLabelCurrentColor: string;\n  stepIndicatorLabelFinishedColor: string;\n  stepIndicatorLabelUnFinishedColor: string;\n  labelColor: string;\n  labelSize: number;\n  labelAlign:\n    | 'center'\n    | 'flex-start'\n    | 'flex-end'\n    | 'stretch'\n    | 'baseline'\n    | undefined;\n  currentStepLabelColor: string;\n  labelFontFamily?: string;\n}\n\nconst defaultStyles: DefaultStepIndicatorStyles = {\n  stepIndicatorSize: 30,\n  currentStepIndicatorSize: 40,\n  separatorStrokeWidth: 3,\n  separatorStrokeUnfinishedWidth: 0,\n  separatorStrokeFinishedWidth: 0,\n  currentStepStrokeWidth: 5,\n  stepStrokeWidth: 0,\n  stepStrokeCurrentColor: '#4aae4f',\n  stepStrokeFinishedColor: '#4aae4f',\n  stepStrokeUnFinishedColor: '#4aae4f',\n  separatorFinishedColor: '#4aae4f',\n  separatorUnFinishedColor: '#a4d4a5',\n  stepIndicatorFinishedColor: '#4aae4f',\n  stepIndicatorUnFinishedColor: '#a4d4a5',\n  stepIndicatorCurrentColor: '#ffffff',\n  stepIndicatorLabelFontSize: 15,\n  currentStepIndicatorLabelFontSize: 15,\n  stepIndicatorLabelCurrentColor: '#000000',\n  stepIndicatorLabelFinishedColor: '#ffffff',\n  stepIndicatorLabelUnFinishedColor: 'rgba(255,255,255,0.5)',\n  labelColor: '#000000',\n  labelSize: 13,\n  labelAlign: 'center',\n  currentStepLabelColor: '#4aae4f',\n};\n\nconst StepIndicator = ({\n  currentPosition = 0,\n  stepCount = 5,\n  direction = 'horizontal',\n  customStyles: customStylesFromProps = defaultStyles,\n  labels = [],\n  onPress,\n  renderStepIndicator: renderCustomStepIndicator,\n  renderLabel,\n}: StepIndicatorProps) => {\n  const [width, setWidth] = React.useState<number>(0);\n  const [height, setHeight] = React.useState<number>(0);\n  const [progressBarSize, setProgressBarSize] = React.useState<number>(0);\n  const [customStyles, setCustomStyles] = React.useState<\n    DefaultStepIndicatorStyles\n  >({\n    ...defaultStyles,\n    ...customStylesFromProps,\n  });\n\n  const progressAnim = React.useRef(new Animated.Value(0)).current;\n  const sizeAnim = React.useRef(\n    new Animated.Value(customStyles.stepIndicatorSize)\n  ).current;\n  const staleSizeAnim = React.useRef(\n    new Animated.Value(customStyles.stepIndicatorSize)\n  ).current;\n  const borderRadiusAnim = React.useRef(\n    new Animated.Value(customStyles.stepIndicatorSize / 2)\n  ).current;\n\n  const stepPressed = (position: number) => {\n    if (onPress) {\n      onPress(position);\n    }\n  };\n\n  const effectCustomStyles = () => {\n    setCustomStyles({ ...customStyles, ...customStylesFromProps });\n  };\n  React.useEffect(effectCustomStyles, [customStylesFromProps]);\n\n  const effectCurrentPosition = () => {\n    onCurrentPositionChanged(currentPosition);\n  };\n  React.useEffect(effectCurrentPosition, [currentPosition, progressBarSize]);\n\n  const renderProgressBarBackground = () => {\n    let progressBarBackgroundStyle: ViewStyle = {\n      backgroundColor: customStyles.separatorUnFinishedColor,\n      position: 'absolute',\n    };\n    if (direction === 'vertical') {\n      progressBarBackgroundStyle = {\n        ...progressBarBackgroundStyle,\n        left: (width - customStyles.separatorStrokeWidth) / 2,\n        top: height / (2 * stepCount),\n        bottom: height / (2 * stepCount),\n        width:\n          customStyles.separatorStrokeUnfinishedWidth === 0\n            ? customStyles.separatorStrokeWidth\n            : customStyles.separatorStrokeUnfinishedWidth,\n      };\n    } else {\n      progressBarBackgroundStyle = {\n        ...progressBarBackgroundStyle,\n        top: (height - customStyles.separatorStrokeWidth) / 2,\n        left: width / (2 * stepCount),\n        right: width / (2 * stepCount),\n        height:\n          customStyles.separatorStrokeUnfinishedWidth === 0\n            ? customStyles.separatorStrokeWidth\n            : customStyles.separatorStrokeUnfinishedWidth,\n      };\n    }\n    return (\n      <View\n        onLayout={(event) => {\n          if (direction === 'vertical') {\n            setProgressBarSize(event.nativeEvent.layout.height);\n          } else {\n            setProgressBarSize(event.nativeEvent.layout.width);\n          }\n        }}\n        style={progressBarBackgroundStyle}\n      />\n    );\n  };\n\n  const renderProgressBar = () => {\n    let progressBarStyle: any = {\n      backgroundColor: customStyles.separatorFinishedColor,\n      position: 'absolute',\n    };\n    if (direction === 'vertical') {\n      progressBarStyle = {\n        ...progressBarStyle,\n        left: (width - customStyles.separatorStrokeWidth) / 2,\n        top: height / (2 * stepCount),\n        bottom: height / (2 * stepCount),\n        width:\n          customStyles.separatorStrokeFinishedWidth === 0\n            ? customStyles.separatorStrokeWidth\n            : customStyles.separatorStrokeFinishedWidth,\n        height: progressAnim,\n      };\n    } else {\n      progressBarStyle = {\n        ...progressBarStyle,\n        top: (height - customStyles.separatorStrokeWidth) / 2,\n        left: width / (2 * stepCount),\n        right: width / (2 * stepCount),\n        height:\n          customStyles.separatorStrokeFinishedWidth === 0\n            ? customStyles.separatorStrokeWidth\n            : customStyles.separatorStrokeFinishedWidth,\n        width: progressAnim,\n      };\n    }\n    return <Animated.View style={progressBarStyle} />;\n  };\n\n  const renderStepIndicator = () => {\n    let steps = [];\n    for (let position = 0; position < stepCount; position++) {\n      steps.push(\n        <TouchableWithoutFeedback\n          key={position}\n          onPress={() => stepPressed(position)}\n        >\n          <View\n            style={[\n              styles.stepContainer,\n              direction === 'vertical'\n                ? { flexDirection: 'column' }\n                : { flexDirection: 'row' },\n            ]}\n          >\n            {renderStep(position)}\n          </View>\n        </TouchableWithoutFeedback>\n      );\n    }\n    return (\n      <View\n        onLayout={(event) => {\n          setWidth(event.nativeEvent.layout.width);\n          setHeight(event.nativeEvent.layout.height);\n        }}\n        style={[\n          styles.stepIndicatorContainer,\n          direction === 'vertical'\n            ? {\n                flexDirection: 'column',\n                width: customStyles.currentStepIndicatorSize,\n              }\n            : {\n                flexDirection: 'row',\n                height: customStyles.currentStepIndicatorSize,\n              },\n        ]}\n      >\n        {steps}\n      </View>\n    );\n  };\n\n  const renderStepLabels = () => {\n    if (!labels || labels.length === 0) {\n      return;\n    }\n    var labelViews = labels.map((label, index) => {\n      const selectedStepLabelStyle =\n        index === currentPosition\n          ? { color: customStyles.currentStepLabelColor }\n          : { color: customStyles.labelColor };\n      return (\n        <TouchableWithoutFeedback\n          style={styles.stepLabelItem}\n          key={index}\n          onPress={() => stepPressed(index)}\n        >\n          <View style={styles.stepLabelItem}>\n            {renderLabel ? (\n              renderLabel({\n                position: index,\n                stepStatus: getStepStatus(index),\n                label,\n                currentPosition,\n              })\n            ) : (\n              <Text\n                style={[\n                  styles.stepLabel,\n                  selectedStepLabelStyle,\n                  {\n                    fontSize: customStyles.labelSize,\n                    fontFamily: customStyles.labelFontFamily,\n                  },\n                ]}\n              >\n                {label}\n              </Text>\n            )}\n          </View>\n        </TouchableWithoutFeedback>\n      );\n    });\n\n    return (\n      <View\n        style={[\n          styles.stepLabelsContainer,\n          direction === 'vertical'\n            ? { flexDirection: 'column', paddingHorizontal: 4 }\n            : { flexDirection: 'row', paddingVertical: 4 },\n          { alignItems: customStyles.labelAlign },\n        ]}\n      >\n        {labelViews}\n      </View>\n    );\n  };\n\n  const renderStep = (position: number) => {\n    let stepStyle;\n    let indicatorLabelStyle: TextStyle = {};\n    switch (getStepStatus(position)) {\n      case STEP_STATUS.CURRENT: {\n        stepStyle = {\n          backgroundColor: customStyles.stepIndicatorCurrentColor,\n          borderWidth: customStyles.currentStepStrokeWidth,\n          borderColor: customStyles.stepStrokeCurrentColor,\n          height: sizeAnim,\n          width: sizeAnim,\n          borderRadius: borderRadiusAnim,\n          overflow: 'hidden',\n        };\n        indicatorLabelStyle = {\n          overflow: 'hidden',\n          fontSize: customStyles.currentStepIndicatorLabelFontSize,\n          color: customStyles.stepIndicatorLabelCurrentColor,\n        };\n\n        break;\n      }\n      case STEP_STATUS.FINISHED: {\n        stepStyle = {\n          backgroundColor: customStyles.stepIndicatorFinishedColor,\n          borderWidth: customStyles.stepStrokeWidth,\n          borderColor: customStyles.stepStrokeFinishedColor,\n          height: staleSizeAnim,\n          width: staleSizeAnim,\n          borderRadius: customStyles.stepIndicatorSize / 2,\n          overflow: 'hidden',\n        };\n        indicatorLabelStyle = {\n          overflow: 'hidden',\n          fontSize: customStyles.stepIndicatorLabelFontSize,\n          color: customStyles.stepIndicatorLabelFinishedColor,\n        };\n        break;\n      }\n\n      case STEP_STATUS.UNFINISHED: {\n        stepStyle = {\n          backgroundColor: customStyles.stepIndicatorUnFinishedColor,\n          borderWidth: customStyles.stepStrokeWidth,\n          borderColor: customStyles.stepStrokeUnFinishedColor,\n          height: staleSizeAnim,\n          width: staleSizeAnim,\n          borderRadius: customStyles.stepIndicatorSize / 2,\n          overflow: 'hidden',\n        };\n        indicatorLabelStyle = {\n          overflow: 'hidden',\n          fontSize: customStyles.stepIndicatorLabelFontSize,\n          color: customStyles.stepIndicatorLabelUnFinishedColor,\n        };\n        break;\n      }\n      default:\n    }\n\n    return (\n      <Animated.View key={'step-indicator'} style={[styles.step, stepStyle]}>\n        {renderCustomStepIndicator ? (\n          renderCustomStepIndicator({\n            position,\n            stepStatus: getStepStatus(position),\n          })\n        ) : (\n          <Text style={indicatorLabelStyle}>{`${position + 1}`}</Text>\n        )}\n      </Animated.View>\n    );\n  };\n\n  const getStepStatus = (stepPosition: number) => {\n    if (stepPosition === currentPosition) {\n      return STEP_STATUS.CURRENT;\n    } else if (stepPosition < currentPosition) {\n      return STEP_STATUS.FINISHED;\n    } else {\n      return STEP_STATUS.UNFINISHED;\n    }\n  };\n\n  const onCurrentPositionChanged = (position: number) => {\n    if (position > stepCount - 1) {\n      position = stepCount - 1;\n    }\n    const animateToPosition = (progressBarSize / (stepCount - 1)) * position;\n    sizeAnim.setValue(customStyles.stepIndicatorSize);\n    staleSizeAnim.setValue(customStyles.stepIndicatorSize);\n    borderRadiusAnim.setValue(customStyles.stepIndicatorSize / 2);\n    Animated.sequence([\n      Animated.timing(progressAnim, {\n        toValue: isNaN(animateToPosition) ? 0 : animateToPosition,\n        duration: 200,\n        useNativeDriver: false,\n      }),\n      Animated.parallel([\n        Animated.timing(sizeAnim, {\n          toValue: customStyles.currentStepIndicatorSize,\n          duration: 100,\n          useNativeDriver: false,\n        }),\n        Animated.timing(borderRadiusAnim, {\n          toValue: customStyles.currentStepIndicatorSize / 2,\n          duration: 100,\n          useNativeDriver: false,\n        }),\n      ]),\n    ]).start();\n  };\n\n  return (\n    <View\n      style={[\n        styles.container,\n        direction === 'vertical'\n          ? { flexDirection: 'row', flex: 1 }\n          : { flexDirection: 'column' },\n      ]}\n    >\n      {width !== 0 && (\n        <React.Fragment>\n          {renderProgressBarBackground()}\n          {renderProgressBar()}\n        </React.Fragment>\n      )}\n      {renderStepIndicator()}\n      {labels && renderStepLabels()}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'rgba(1,0,0,0)',\n  },\n  stepIndicatorContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-around',\n    backgroundColor: 'rgba(1,0,0,0)',\n  },\n  stepLabelsContainer: {\n    justifyContent: 'space-around',\n  },\n  step: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    zIndex: 2,\n  },\n  stepContainer: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  stepLabel: {\n    fontSize: 12,\n    textAlign: 'center',\n    fontWeight: '500',\n  },\n  stepLabelItem: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n\nexport default React.memo(StepIndicator);\n"]},"metadata":{},"sourceType":"module"}