{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/home/sagar/Desktop/astro_care/components/Icon.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport * as Font from 'expo-font';\nimport { createIconSetFromIcoMoon } from '@expo/vector-icons';\nimport { Icon } from 'galio-framework';\nimport GalioConfig from \"../assets/fonts/galioExtra\";\n\nvar GalioExtra = require(\"../assets/fonts/galioExtra.ttf\");\n\nvar IconGalioExtra = createIconSetFromIcoMoon(GalioConfig, 'GalioExtra');\n\nvar IconExtra = function (_React$Component) {\n  _inherits(IconExtra, _React$Component);\n\n  var _super = _createSuper(IconExtra);\n\n  function IconExtra() {\n    var _this;\n\n    _classCallCheck(this, IconExtra);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      fontLoaded: false\n    };\n    return _this;\n  }\n\n  _createClass(IconExtra, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      return _regeneratorRuntime.async(function componentDidMount$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Font.loadAsync({\n                GalioExtra: GalioExtra\n              }));\n\n            case 2:\n              this.setState({\n                fontLoaded: true\n              });\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          name = _this$props.name,\n          family = _this$props.family,\n          rest = _objectWithoutProperties(_this$props, [\"name\", \"family\"]);\n\n      if (name && family && this.state.fontLoaded) {\n        if (family === 'GalioExtra') {\n          return React.createElement(IconGalioExtra, _extends({\n            name: name,\n            family: family\n          }, rest, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 26,\n              columnNumber: 16\n            }\n          }));\n        }\n\n        return React.createElement(Icon, _extends({\n          name: name,\n          family: family\n        }, rest, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 14\n          }\n        }));\n      }\n\n      return null;\n    }\n  }]);\n\n  return IconExtra;\n}(React.Component);\n\nexport { IconExtra as default };","map":{"version":3,"sources":["/home/sagar/Desktop/astro_care/components/Icon.js"],"names":["React","Font","createIconSetFromIcoMoon","Icon","GalioConfig","GalioExtra","require","IconGalioExtra","IconExtra","state","fontLoaded","loadAsync","setState","props","name","family","rest","Component"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,IAAZ,MAAsB,WAAtB;AACA,SAASC,wBAAT,QAAyC,oBAAzC;AACA,SAASC,IAAT,QAAqB,iBAArB;AAEA,OAAOC,WAAP;;AAEA,IAAMC,UAAU,GAAGC,OAAO,kCAA1B;;AACA,IAAMC,cAAc,GAAGL,wBAAwB,CAACE,WAAD,EAAc,YAAd,CAA/C;;IAEqBI,S;;;;;;;;;;;;;;;UACnBC,K,GAAQ;AACNC,MAAAA,UAAU,EAAE;AADN,K;;;;;;WAIR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACQT,IAAI,CAACU,SAAL,CAAe;AAAEN,gBAAAA,UAAU,EAAEA;AAAd,eAAf,CADR;;AAAA;AAEE,mBAAKO,QAAL,CAAc;AAAEF,gBAAAA,UAAU,EAAE;AAAd,eAAd;;AAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;WAKA,kBAAS;AAAA,wBAC2B,KAAKG,KADhC;AAAA,UACCC,IADD,eACCA,IADD;AAAA,UACOC,MADP,eACOA,MADP;AAAA,UACkBC,IADlB;;AAGP,UAAIF,IAAI,IAAIC,MAAR,IAAkB,KAAKN,KAAL,CAAWC,UAAjC,EAA6C;AAC3C,YAAIK,MAAM,KAAK,YAAf,EAA6B;AAC3B,iBAAO,oBAAC,cAAD;AAAgB,YAAA,IAAI,EAAED,IAAtB;AAA4B,YAAA,MAAM,EAAEC;AAApC,aAAgDC,IAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAP;AACD;;AACD,eAAO,oBAAC,IAAD;AAAM,UAAA,IAAI,EAAEF,IAAZ;AAAkB,UAAA,MAAM,EAAEC;AAA1B,WAAsCC,IAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAP;AACD;;AAED,aAAO,IAAP;AACD;;;;EArBoChB,KAAK,CAACiB,S;;SAAxBT,S","sourcesContent":["import React from 'react';\nimport * as Font from 'expo-font';\nimport { createIconSetFromIcoMoon } from '@expo/vector-icons';\nimport { Icon } from 'galio-framework';\n\nimport GalioConfig from '../assets/fonts/galioExtra';\n\nconst GalioExtra = require('../assets/fonts/galioExtra.ttf');\nconst IconGalioExtra = createIconSetFromIcoMoon(GalioConfig, 'GalioExtra');\n\nexport default class IconExtra extends React.Component {\n  state = {\n    fontLoaded: false,\n  }\n\n  async componentDidMount() {\n    await Font.loadAsync({ GalioExtra: GalioExtra });\n    this.setState({ fontLoaded: true });\n  }\n\n  render() {\n    const { name, family, ...rest } = this.props;\n    \n    if (name && family && this.state.fontLoaded) {\n      if (family === 'GalioExtra') {\n        return <IconGalioExtra name={name} family={family} {...rest} />;\n      }\n      return <Icon name={name} family={family} {...rest} />;\n    }\n\n    return null;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}